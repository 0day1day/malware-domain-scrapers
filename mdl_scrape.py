'''
mdl_scrape.py
mhg637 at motorolasolutions dot com

This script scrapes the mdl table using Beautiful Soup 4.

Python 2.7: http://docs.python.org/2.7/
urllib2: http://docs.python.org/2.7/library/urllib2.html
argparse: http://docs.python.org/2/library/argparse.html
argparse tutorial: http://docs.python.org/2/howto/argparse.html
bs4: http://crummy.com/software/BeautifulSoup/bs4/doc/

'''

from bs4 import BeautifulSoup
import urllib2
import argparse 
import sys
import csv

# Argument parser for script options
parser = argparse.ArgumentParser(description='Scrapes the Malware Domains List for malicious domain names.', usage='mdl_scraper.py [-h] [-v] [-o <file>] [-c <file>]')
parser.add_argument('--output','-o', help='specify a file to write to')
parser.add_argument('--csv', '-c', help='specify a csv to write to')
parser.add_argument('--verbose', '-v', action='store_true', help='be verbose')
parser.add_argument('--splunk', '-s', action='store_true', help='Start Splunk search with results.')
parser.add_argument('--rows', '-r', help='specify number of rows to pull from thelist. default=50')
args = parser.parse_args()


# If the --columns flag is chosen, modify the mdl url that will be scraped
if args.rows:
  url = 'http://www.malwaredomainlist.com/mdl.php?inactive=&sort=Date&search=&colsearch=All&ascordesc=DESC&quantity=%s&page=0' %args.rows
else:
  url = 'http://www.malwaredomainlist.com/mdl.php'

# Create the http request
request = urllib2.Request(url)
request.add_header('User-Agent', 'Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:21.0) Gecko/20100101 Firefox/21.0')

# Assign the html scraped to the html variable
html = urllib2.urlopen(request).read()

# Strip out the <wbr> tags
html = html.replace('<wbr>', '')

# Create a Beautiful soup object with the html scraped
soup = BeautifulSoup(html)

# Parse out all of the tables in the html into a list
tables = soup.findChildren('table')

# Select the second table in the list (this is the mdl)
table = tables[1]

# Only keep the rows of the table with no attributes (omit the header row)
rows = table.findChildren('tr', attrs={'class': None})

# Create an empty list called domains, where the malicious domains will be stored
domains = []

# For each row in the rows list...
for row in rows:

  # Get the domain and IP data from the second and third column
  domain_data = row.findChildren('td')[1]
  ip_data = row.findChildren('td')[2]

  # Turn that data into a string
  domain = domain_data.string
  ip = ip_data.string
  
  # If there is not a - as the domain listing...
  if domain != '-':
    # Split the url into a list and only take the domain (throw away the rest)
    domain = domain.split('/')
    domain = domain.pop(0)
    domains.append(domain)

  # If the domain listing is - ...
  elif domain == '-':
    # Split the url into a list and only take the IP
    ip = ip.split('/')
    ip = ip.pop(0)
    domains.append(ip)
  
# Dedupe the domains list
domain_set = set(domains)
domains = []
for i in domain_set:
  domains.append(i)

# If the length of the domains list is > 0
if len(domains) != 0:

  # Print domains to a csv if the argement is present
  if args.csv:
    if args.verbose:
      print '>>> Writing domains to csv'
    csv_file = open(args.csv, 'ab')
    writer = csv.writer(csv_file,dialect='excel')
    writer.writerow(domains)
#    for d in domains:
#      writer.writerow(d)
    csv_file.close()
  
  # Print domains to a file if the argement is present
  elif args.output:
    if args.verbose:
      print '>>> Writing domains to file'
    f = open(args.output, 'wb')
    for d in domains:
      f.write(d)
    f.close()
  
  # Start a splunk query if the splunk flag is present
  elif args.splunk:
  
    # Print the domains as a Splunk friendly string id the argument is present
    l = ''
    for d in domains:
      if d != domains[-1]:
        l += '"%s" OR ' %(d)
      else:
        l += '"%s"' %(d)
    print l

  # If no args a present print domains to stdout
  else:
    if args.verbose:
      print '>>> Printing domains'
    for d in domains:
      print d

# If the domains list is empty print...
else:
  print 'There are no domains, something went terribly wrong. Contact your local administrator.'

